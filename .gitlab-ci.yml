variables:
    # The host for the test SGame instance
    SGAME_HOST: "localhost"
    # The port for the test SGame instance
    SGAME_PORT: "5000"

stages:
    - build
    - test

# Build stage: build the C# SGame executable
build:
    stage: build
    before_script:
        # Before building: restore C# dependencies for SGame
        - dotnet restore SGame
    script:
        - dotnet build SGame

# Test stage
test:
    stage: test
    script:
        # Start an instance of the SGame server in the background (redirect stdout->stderr; sleep a bit for it to init)
        - cd ${CI_PROJECT_DIR}
        - dotnet run --project SGame -- --host ${SGAME_HOST} --port ${SGAME_PORT} 1>&2 &
        - sleep 5
        # Run automated tests via pytest - BUT intercept the exit code and kill the server manually after
        # so that GitLab CI does not hang forever!
        # (See issue #33; otherwise GitLab will stall until timeout because the SGame process in the background won't terminate!)
        - cd ${CI_PROJECT_DIR}/tests
        - |
          function runtests() {
            pytest *.py --sgame ${CI_PROJECT_DIR}/SGame --host ${SGAME_HOST} --port ${SGAME_PORT}
            TESTS_EXIT_CODE=$?

            curl -X POST -d "exit" "http://${SGAME_HOST}:${SGAME_PORT}/exit"
            sleep 2
            pkill -KILL $(jobs -p) || "Server already stopped"

            return $TESTS_EXIT_CODE
          }
          runtests
