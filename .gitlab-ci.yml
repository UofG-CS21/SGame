variables:
    # The host for the test SGame instance
    SGAME_HOST: "localhost"
    # The port for the test SGame instance
    SGAME_PORT: "5000"

stages:
    - buildAndStaticAnalysis
    - unitTest
    - pytest

# Build stage: build the C# SGame and SArbiter
# >> FxCop runs static analysis automatically with the `dotnet build`! <<
buildAndStaticAnalysis-SGame:
    stage: buildAndStaticAnalysis
    before_script:
        # Before building: restore C# dependencies for SGame
        - dotnet restore SGame
    script:
        # Build (& integrated FxCop analysis)
        - dotnet build SGame

buildAndStaticAnalysis-SArbiter:
    stage: buildAndStaticAnalysis
    before_script:
        # Before building: restore C# dependencies for SArbiter
        - dotnet restore SArbiter
    script:
        # Build (& integrated FxCop analysis)
        - dotnet build SArbiter

# unitTest stage: test the C# SGame and SArbiter
unitTest-SGame:
    stage: unitTest
    script:
        - cd ${CI_PROJECT_DIR}/SGame.Tests
        - dotnet test

unitTest-SArbiter:
    stage: unitTest
    script:
        - cd ${CI_PROJECT_DIR}/SArbiter.Tests
        - dotnet test

# pytest stage (blackbox): tests that the client can connect, run through all rest api commands and disconnect successfully
pytest:
    stage: pytest
    script:
        # Run automated tests via pytest
        # (See issue #33 for why this in its own script; otherwise, GitLab will
        #  stall until timeout because the SGame process in the background won't terminate!)
        - cd ${CI_PROJECT_DIR}
        - bash ci/runtests.sh ${SGAME_HOST} ${SGAME_PORT}
