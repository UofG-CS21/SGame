variables:
    # The host for the test SGame instance
    SGAME_HOST: "localhost"
    # The port for the test SGame instance
    SGAME_PORT: "5000"

stages:
    - build
    - test

# Build stage: build the C# SGame executable
build:
    stage: build
    before_script:
        # Before building: restore C# dependencies for SGame
        - "dotnet restore SGame"
    script:
        - "dotnet build SGame"

# Test stage
test:
    stage: test
    before_script:
        # Start an instance of the SGame server in the background (redirect stdout->stderr)
        # (See issue #33 for why this is sometimes problematic)
        - "cd ${CI_PROJECT_DIR}"
        - "dotnet run --project SGame -- --host ${SGAME_HOST} --port ${SGAME_PORT} 1>&2 &"
        # Wait for a bit for it to init
        - "sleep 5"
    script:
        # Run automated tests via pytest.
        - "cd ${CI_PROJECT_DIR}/tests"
        - "pytest *.py --sgame ${CI_PROJECT_DIR}/SGame --host ${SGAME_HOST} --port ${SGAME_PORT}"
    after_script:
        # Kill the background SGame process after testing
        - "curl -X POST -d 'exit' 'http://${SGAME_HOST}:${SGAME_PORT}/exit'"
